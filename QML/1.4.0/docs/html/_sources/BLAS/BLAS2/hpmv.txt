(C|Z)HPMV
=============
Single complex and double complex HPMV.

Description
-----------
Computes the packed hermitian matrix-vector operation: 

.. math::

    y \assign \alpha A * x + \beta y

BLAS Interface
--------------
.. code-block:: c

    void chpmv(const char *UPLO, const qml_long *N, const qml_single_complex *ALPHA,
               const qml_single_complex *AP, const qml_single_complex *X,
               const qml_long *INCX, const qml_single_complex *BETA,
               qml_single_complex *Y, const qml_long *INCY);

    void zhpmv(const char *UPLO, const qml_long *N, const qml_double_complex *ALPHA,
               const qml_double_complex *AP, const qml_double_complex *X,
               const qml_long *INCX, const qml_double_complex *BETA,
               qml_double_complex *Y, const qml_long *INCY);


CBLAS Interface
---------------
.. code-block:: c

    void cblas_chpmv(const CBLAS_ORDER ORDER, const CBLAS_UPLO UPLO, const qml_long N,
                     const qml_single_complex *ALPHA, const qml_single_complex *AP,
                     const qml_single_complex *X, const qml_long INCX,
                     const qml_single_complex *BETA, qml_single_complex *Y,
                     const qml_long INCY);

    void cblas_zhpmv(const CBLAS_ORDER ORDER, const CBLAS_UPLO UPLO, const qml_long N,
                     const qml_double_complex *ALPHA, const qml_double_complex *AP,
                     const qml_double_complex *X, const qml_long INCX,
                     const qml_double_complex *BETA, qml_double_complex *Y,
                     const qml_long INCY);


Arguments
---------
======   =====================================================================
UPLO     Specify whether the upper or lower triangle of matrix A will be used
N        Order of matrix A
ALPHA    Scalar multiplied with the matrix-vector product
AP       Matrix A stored in packed triangular form, must be at least: :math:`\fvar{N}\mult(\fvar{N}+1)/2`
X        First input vector, must be at least: :math:`(\fvar{N}-1)\mult\abs{\fvar{INCX}} + 1`
INCX     Distance between individual elements in X
BETA     Scalar multiplied with vector Y
Y        Second input vector, must be at least: :math:`(\fvar{M}-1)\mult\abs{\fvar{INCY}} + 1`
INCY     Distance between individual elements in Y
======   =====================================================================
